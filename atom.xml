<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Foolishwolf's Code Blog]]></title>
  <link href="http://foolishwolf.github.io/atom.xml" rel="self"/>
  <link href="http://foolishwolf.github.io/"/>
  <updated>2017-06-05T20:40:47+08:00</updated>
  <id>http://foolishwolf.github.io/</id>
  <author>
    <name><![CDATA[Foolishwolf]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[从TFS获取指定日期后的最新版本文件]]></title>
    <link href="http://foolishwolf.github.io/blog/2017/06/03/getting-newest-version-from-tfs-after-specific-date/"/>
    <updated>2017-06-03T15:36:31+08:00</updated>
    <id>http://foolishwolf.github.io/blog/2017/06/03/getting-newest-version-from-tfs-after-specific-date</id>
    <content type="html"><![CDATA[<p>对于迭代开发的版本管理来说，最经常的事情，就是整理每次迭代的版本。特别是时间紧张的时候，每天可能都需要下发版本进行测试。<br/>
之前各开发人员填写版本下发清单，然后根据清单来整理版本和部署执行码，难免会有漏填的情况。而每次迭代增加新的目录，也过于繁琐。<br/>
其实对于每个增量版本来说，起始时间都是上次版本的结束时间。在当前版本开发结束后，版本管理员可以暂时锁定TFS，禁止开发人员签入，然后以上次版本的结束时间为起点，获取TFS上签入的所有执行文件，这些文件就是当前版本的全部增量集。<br/>
然而，VS的IDE中，并没有实现这一功能，所以只能利用TFS的API来编码实现。</p>

<!--more-->


<p> </p>

<h3>程序实现</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> 程序功能：按起始时间从TFS上获取某一路径下签入文件的最新版本    </span>
</span><span class='line'><span class="cm"> 可选输入：起始时间（格式：2017-01-01 或 2017-01-01 10:10:10），默认为当天的0点  </span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Configuration</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Microsoft.TeamFoundation.Client</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Microsoft.TeamFoundation.VersionControl.Client</span><span class="p">;</span>
</span><span class='line'><span class="k">namespace</span> <span class="nn">TfsFetch</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Program</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">//private System.Net.NetworkCredential netCred;  </span>
</span><span class='line'>      <span class="k">private</span> <span class="n">TfsTeamProjectCollection</span> <span class="n">tfsTeamProjCol</span><span class="p">;</span>
</span><span class='line'>      <span class="k">private</span> <span class="n">VersionControlServer</span> <span class="n">vcs</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">//private Workspace ws; </span>
</span><span class='line'>      <span class="k">public</span> <span class="nf">Program</span><span class="p">()</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="kt">string</span> <span class="n">serverUrl</span> <span class="p">=</span> <span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="s">&quot;serverUrl&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">tfsTeamProjCol</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TfsTeamProjectCollection</span><span class="p">(</span><span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="n">serverUrl</span><span class="p">));</span>
</span><span class='line'>          <span class="n">vcs</span> <span class="p">=</span> <span class="n">tfsTeamProjCol</span><span class="p">.</span><span class="n">GetService</span><span class="p">&lt;</span><span class="n">VersionControlServer</span><span class="p">&gt;();</span>
</span><span class='line'>          <span class="c1">//ws = vcs.GetWorkspace(workSpacePath);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="c1">//获取签入文件的最新版本</span>
</span><span class='line'>      <span class="c1">//startTime: 签入时间的最早边界</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">void</span> <span class="nf">GetLatestItems</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">startTime</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kt">string</span> <span class="n">tfsVerPath</span> <span class="p">=</span> <span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="s">&quot;tfsVerPath&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">ItemSet</span> <span class="n">itemSet</span> <span class="p">=</span> <span class="n">vcs</span><span class="p">.</span><span class="n">GetItems</span><span class="p">(</span><span class="n">tfsVerPath</span><span class="p">,</span> <span class="n">RecursionType</span><span class="p">.</span><span class="n">Full</span><span class="p">);</span>
</span><span class='line'>          <span class="kt">string</span> <span class="n">localRootPathWithDate</span> <span class="p">=</span>
</span><span class='line'>          <span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="s">&quot;localRootPath&quot;</span><span class="p">)</span> <span class="p">+</span> <span class="s">&quot;/&quot;</span> <span class="p">+</span>
</span><span class='line'>          <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">ToString</span><span class="p">(</span><span class="s">&quot;yyyyMMdd&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="kt">string</span> <span class="n">histLocalRootpath</span> <span class="p">=</span> <span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="s">&quot;histLocalRootpath&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="kt">string</span> <span class="n">histLocalRootpathWithDate</span> <span class="p">=</span> <span class="n">histLocalRootpath</span> <span class="p">+</span> <span class="s">&quot;/&quot;</span> <span class="p">+</span>
</span><span class='line'>          <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">ToString</span><span class="p">(</span><span class="s">&quot;yyyyMMdd_hhmmss&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="n">Exists</span><span class="p">(</span><span class="n">localRootPathWithDate</span><span class="p">))</span>
</span><span class='line'>          <span class="c1">//这里的前提是，实际开发中每天最多发一个版本进行测试，所以如果当天已经下载过版本，则需要将当天已下载的版本移到历史版本库中，以最新下载的为准</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="k">try</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="k">if</span><span class="p">(!</span><span class="n">Directory</span><span class="p">.</span><span class="n">Exists</span><span class="p">(</span><span class="n">histLocalRootpath</span><span class="p">))</span>
</span><span class='line'>                  <span class="p">{</span>
</span><span class='line'>                      <span class="n">Directory</span><span class="p">.</span><span class="n">CreateDirectory</span><span class="p">(</span><span class="n">histLocalRootpath</span><span class="p">);</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                  <span class="n">Directory</span><span class="p">.</span><span class="n">Move</span><span class="p">(</span><span class="n">localRootPathWithDate</span><span class="p">,</span> <span class="n">histLocalRootpathWithDate</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Error: Moving folder failed&quot;</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">dlCount</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>          <span class="k">foreach</span><span class="p">(</span><span class="n">Item</span> <span class="n">item</span> <span class="k">in</span> <span class="n">itemSet</span><span class="p">.</span><span class="n">Items</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="kt">string</span> <span class="n">excludedFolder</span> <span class="p">=</span>
</span><span class='line'>              <span class="n">tfsVerPath</span> <span class="p">+</span> <span class="s">&quot;/&quot;</span> <span class="p">+</span>
</span><span class='line'>              <span class="n">ConfigurationManager</span><span class="p">.</span><span class="n">AppSettings</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="s">&quot;excludedSubFolder&quot;</span><span class="p">);</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">CheckinDate</span> <span class="p">&gt;=</span> <span class="n">startTime</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>              <span class="n">item</span><span class="p">.</span><span class="n">ServerItem</span><span class="p">.</span><span class="n">LastIndexOf</span><span class="p">(</span><span class="n">excludedFolder</span><span class="p">)</span> <span class="p">==</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">ServerItem</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;Check-in time: &quot;</span> <span class="p">+</span> <span class="n">item</span><span class="p">.</span><span class="n">CheckinDate</span><span class="p">);</span>
</span><span class='line'>                  <span class="kt">string</span> <span class="n">localPath</span> <span class="p">=</span>
</span><span class='line'>                  <span class="n">localRootPathWithDate</span> <span class="p">+</span> <span class="s">&quot;/&quot;</span> <span class="p">+</span>
</span><span class='line'>                  <span class="n">item</span><span class="p">.</span><span class="n">ServerItem</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="n">tfsVerPath</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
</span><span class='line'>                  <span class="kt">int</span> <span class="n">folderLastIdx</span> <span class="p">=</span> <span class="n">localPath</span><span class="p">.</span><span class="n">LastIndexOf</span><span class="p">(</span><span class="sc">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'>                  <span class="kt">string</span> <span class="n">folderPath</span> <span class="p">=</span> <span class="n">localPath</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">folderLastIdx</span><span class="p">);</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(!</span> <span class="n">Directory</span><span class="p">.</span><span class="n">Exists</span><span class="p">(</span><span class="n">folderPath</span><span class="p">))</span>
</span><span class='line'>                  <span class="p">{</span>
</span><span class='line'>                      <span class="n">Directory</span><span class="p">.</span><span class="n">CreateDirectory</span><span class="p">(</span><span class="n">folderPath</span><span class="p">);</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                  <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;    &quot;</span><span class="p">);</span>
</span><span class='line'>                  <span class="k">try</span>
</span><span class='line'>                  <span class="p">{</span>
</span><span class='line'>                      <span class="n">item</span><span class="p">.</span><span class="n">DownloadFile</span><span class="p">(</span><span class="n">localPath</span><span class="p">);</span>
</span><span class='line'>                      <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Type: File&quot;</span><span class="p">);</span>
</span><span class='line'>                      <span class="n">dlCount</span><span class="p">++;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                  <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">{</span>
</span><span class='line'>                      <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;Type: Directory\n&quot;</span><span class="p">);</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                  <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;\nDownloaded files count: &quot;</span> <span class="p">+</span> <span class="n">dlCount</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="kt">string</span> <span class="n">startTimeStr</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">ToString</span><span class="p">(</span><span class="s">&quot;yyyy-MM-dd&quot;</span><span class="p">)</span> <span class="p">+</span> <span class="s">&quot; 00:00:00&quot;</span><span class="p">;</span>
</span><span class='line'>          <span class="n">DateTime</span> <span class="n">startTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">startTimeStr</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Length</span> <span class="p">&lt;</span> <span class="m">1</span> <span class="p">||</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="s">&quot;/help&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span>
</span><span class='line'>              <span class="s">&quot;Example:\n&quot;</span> <span class="p">+</span>
</span><span class='line'>              <span class="s">&quot;\tTfsFetch [dateTime]\n&quot;</span> <span class="p">+</span>
</span><span class='line'>              <span class="s">&quot;\tdateTime: 2017-01-01 || 2017-01-01 12:30:30\n\n&quot;</span> <span class="p">+</span>
</span><span class='line'>              <span class="s">&quot;\tDefault start time: &quot;</span> <span class="p">+</span> <span class="n">startTimeStr</span> <span class="p">+</span> <span class="s">&quot;\n&quot;</span>
</span><span class='line'>              <span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;=</span> <span class="m">1</span> <span class="p">&amp;&amp;</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">!=</span> <span class="s">&quot;/help&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="k">switch</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Length</span><span class="p">)</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="k">case</span> <span class="m">1</span><span class="p">:</span>
</span><span class='line'>                      <span class="n">startTimeStr</span> <span class="p">=</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>                      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">case</span> <span class="m">2</span><span class="p">:</span>
</span><span class='line'>                      <span class="n">startTimeStr</span> <span class="p">=</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">+</span> <span class="s">&quot; &quot;</span> <span class="p">+</span> <span class="n">args</span><span class="p">[</span><span class="m">1</span><span class="p">];</span>
</span><span class='line'>                      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">default</span><span class="p">:</span>
</span><span class='line'>                      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">try</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">startTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">startTimeStr</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">catch</span><span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Error: Wrong time format&quot;</span><span class="p">);</span>
</span><span class='line'>              <span class="n">Console</span><span class="p">.</span><span class="n">ReadKey</span><span class="p">();</span>
</span><span class='line'>              <span class="k">return</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Downloaded list:\n&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">Program</span> <span class="n">prog</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Program</span><span class="p">();</span>
</span><span class='line'>          <span class="n">prog</span><span class="p">.</span><span class="n">GetLatestItems</span><span class="p">(</span><span class="n">startTime</span><span class="p">);</span>
</span><span class='line'>          <span class="n">Console</span><span class="p">.</span><span class="n">ReadKey</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python实现判断一行代码是否为注释]]></title>
    <link href="http://foolishwolf.github.io/blog/2016/11/20/using-paython-to-find-comments-in-code/"/>
    <updated>2016-11-20T18:19:19+08:00</updated>
    <id>http://foolishwolf.github.io/blog/2016/11/20/using-paython-to-find-comments-in-code</id>
    <content type="html"><![CDATA[<p>目前的编辑器大都可以自动检测某一行代码是否为代码行或注释行，但并不太提供代码行/注释行行数的统计，对于大量代码文件的代码行/注释行统计，就更少见一些。本篇文章试用一段Python脚本来实现这一目标，并希望可以兼容统计不同语言编写的代码。</p>

<!--more-->


<p> </p>

<h3>注释符号的研究</h3>

<p>我们先来关注常见语言的注释符号构成。一般来讲注释符号分为单行注释符和多行注释符，以Python为例，则分别为<code>#</code>和<code>'''</code>(或<code>"""</code>)。由于多行注释符会影响后续行的判断，所以在遍历各行时必须存在一个标志位<code>multiCmtFlagIdx</code>，来记录是否已经开始多行注释，以及多行注释的符号为哪一种。有了该判断之后，才可以继续对后续的字符进行分析。</p>

<h4>1. 在多行注释中</h4>

<p>这种情况后面的分析较为简单，由于已知多行注释符的类型，我们可以判断后续的字符中最早出现对应的多行注释结束符的位置为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>re.search(endCmtFlag, line[startPos:]).start() + startPos</span></code></pre></td></tr></table></div></figure>


<p>如果可以搜索到，则将<code>multiCmtFlagIdx</code>赋值为<code>-1</code>，表示多行注释已经结束。如果没有搜索到，则说明本行后续字符仍在多行注释中，可以直接开始下一行的解析。</p>

<h4>2. 不在多行注释中</h4>

<p>对于这种情况，如果后续字符中除了空格和制表符，首先出现的是单行注释符，则注释符后面的字符都在注释中，所以可以直接结束本行的解析，开始下一行。否则，我们需要继续搜索多行注释开始符出现的位置。<br/>
找到多行注释开始符后，并不意味着后面就是注释内容，还需要做两点检查：1）该注释符是否在引号对中，因为此时在引号中的注释符是不起作用的；2）该注释符是否是最早出现的多行注释开始符类型，由于同一种语言的多行注释符可能有多种，而只有最早出现的多行注释开始符才起作用。<br/>
1）针对第一点，我们可以在搜索的起点到该注释符的区间内计算引号的数量，如果引号为偶数，则说明不在引号对中，否则在引号对中。<br/>
引号数量奇偶性判断，需要逐对来判断，这是因为引号对中的引号是不起作用的。有一种特例是，多行注释符同时也是引号的组合，例如Python。此时计算数量的引号，需要与搜索到的多行注释符不同，如多行注释符为<code>'''</code>，则应该计算<code>"</code>的数量。<br/>
2）针对第二点，我们可以遍历各个多行注释开始符，并取位置最靠前的开始符，然后查找对应的结束符。</p>

<h3>代码实现</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">isCmt</span>
</span><span class='line'><span class="sd">功能：判断一行字符串是否为注释</span>
</span><span class='line'><span class="sd">输入：</span>
</span><span class='line'><span class="sd"> line: 字符串行</span>
</span><span class='line'><span class="sd"> isInMultiCmt：前面一行是否在多行注释中</span>
</span><span class='line'><span class="sd"> qttnFlagList: 引号列表</span>
</span><span class='line'><span class="sd">输出：</span>
</span><span class='line'><span class="sd"> isCmt: 当前行是否为注释</span>
</span><span class='line'><span class="sd"> isInMultiCmt：当前行是否在多行注释中</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">isCmt</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">multiCmtFlagIdx</span><span class="p">,</span> <span class="n">cmtFlagObj</span><span class="p">):</span>
</span><span class='line'>  <span class="n">singleCmtFlag</span> <span class="o">=</span> <span class="n">cmtFlagObj</span><span class="p">[</span><span class="s">&quot;singleCmtFlag&quot;</span><span class="p">]</span> <span class="c">#单行注释符号</span>
</span><span class='line'>  <span class="n">multiCmtFlagList</span> <span class="o">=</span><span class="n">cmtFlagObj</span><span class="p">[</span><span class="s">&quot;multiCmtFlagList&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">qttnFlagList</span> <span class="o">=</span> <span class="n">cmtFlagObj</span><span class="p">[</span><span class="s">&quot;qttnFlagList&quot;</span><span class="p">]</span> <span class="c">#引号列表</span>
</span><span class='line'>  <span class="n">startPos</span> <span class="o">=</span> <span class="mi">0</span> <span class="c">#搜索多行注释符的开始位置</span>
</span><span class='line'>  <span class="n">isCmtRet</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>  <span class="c"># print &#39;line: &#39; + line.strip()</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">startPos</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">line</span><span class="p">):</span> <span class="c">#查找注释符号直到行末</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">multiCmtFlagIdx</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span> <span class="c">#不在多行注释中</span>
</span><span class='line'>          <span class="n">minStartIdx</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="c">#搜索到最靠前的多行注释符</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">singleCmtFlag</span> <span class="o">!=</span> <span class="s">&#39;&#39;</span> <span class="ow">and</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s">r&#39;(\s)*&#39;</span> <span class="o">+</span> <span class="n">singleCmtFlag</span><span class="p">,</span> <span class="n">line</span><span class="p">[</span><span class="n">startPos</span><span class="p">:]):</span> <span class="c">#单行注释</span>
</span><span class='line'>              <span class="k">break</span>
</span><span class='line'>          <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>          <span class="n">preStartIdx</span> <span class="o">=</span> <span class="n">startPos</span> <span class="c">#记录搜索多行注释符前的搜索位置</span>
</span><span class='line'>          <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">cmtFlagObj</span><span class="p">[</span><span class="s">&quot;multiCmtFlagList&quot;</span><span class="p">]):</span>
</span><span class='line'>              <span class="n">startCmtFlag</span> <span class="o">=</span> <span class="n">cmtFlagObj</span><span class="p">[</span><span class="s">&quot;multiCmtFlagList&quot;</span><span class="p">][</span><span class="n">idx</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="c">#多行注释开始符号</span>
</span><span class='line'>              <span class="k">if</span> <span class="n">startCmtFlag</span> <span class="o">==</span> <span class="s">&#39;&#39;</span><span class="p">:</span>
</span><span class='line'>                  <span class="k">return</span> <span class="bp">False</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="c">#无多行注释符号</span>
</span><span class='line'>              <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                  <span class="n">startPos</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;(?&lt;!</span><span class="se">\\</span><span class="s">)&#39;</span> <span class="o">+</span> <span class="n">startCmtFlag</span><span class="p">,</span> <span class="n">line</span><span class="p">[</span><span class="n">startPos</span><span class="p">:])</span><span class="o">.</span><span class="n">start</span><span class="p">()</span> <span class="o">+</span> <span class="n">startPos</span> <span class="c">#找到多行注释开始符号</span>
</span><span class='line'>                  <span class="k">if</span> <span class="n">isInQuotation</span><span class="p">(</span><span class="n">line</span><span class="p">[:</span><span class="n">startPos</span><span class="p">],</span> <span class="n">startCmtFlag</span><span class="p">,</span> <span class="n">qttnFlagList</span><span class="p">):</span> <span class="c">#注释开始符在引号中</span>
</span><span class='line'>                      <span class="n">startPos</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">startCmtFlag</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;\*&#39;</span><span class="p">,</span> <span class="s">&#39;*&#39;</span><span class="p">))</span> <span class="c">#找下一个多行注释开始符</span>
</span><span class='line'>                      <span class="k">continue</span>
</span><span class='line'>                  <span class="k">else</span><span class="p">:</span> <span class="c">#注释符号不在引号中</span>
</span><span class='line'>                      <span class="n">startPos</span> <span class="o">+=</span> <span class="nb">len</span><span class="p">(</span><span class="n">startCmtFlag</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;\*&#39;</span><span class="p">,</span> <span class="s">&#39;*&#39;</span><span class="p">))</span>
</span><span class='line'>                      <span class="k">if</span> <span class="n">startPos</span> <span class="o">&lt;</span> <span class="n">minStartIdx</span><span class="p">:</span>
</span><span class='line'>                          <span class="n">multiCmtFlagIdx</span> <span class="o">=</span> <span class="n">idx</span> <span class="c">#是多行注释</span>
</span><span class='line'>                          <span class="n">minStartIdx</span> <span class="o">=</span> <span class="n">startPos</span>
</span><span class='line'>                      <span class="n">startPos</span> <span class="o">=</span> <span class="n">preStartIdx</span> <span class="c">#找下一个多行注释开始符</span>
</span><span class='line'>                      <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>              <span class="k">except</span><span class="p">:</span>
</span><span class='line'>                  <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>                  <span class="k">continue</span> <span class="c">#没有找到多行注释开始符，继续查找下个类型的符号</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">if</span> <span class="n">minStartIdx</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">line</span><span class="p">):</span> <span class="c">#此时搜索到了多行注释开始符</span>
</span><span class='line'>              <span class="n">startCmtFlag</span> <span class="o">=</span> <span class="n">cmtFlagObj</span><span class="p">[</span><span class="s">&quot;multiCmtFlagList&quot;</span><span class="p">][</span><span class="n">multiCmtFlagIdx</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>              <span class="k">if</span> <span class="ow">not</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s">r&#39;(\s)*&#39;</span> <span class="o">+</span> <span class="n">startCmtFlag</span><span class="p">,</span> <span class="n">line</span><span class="p">[</span><span class="n">preStartIdx</span><span class="p">:]):</span>
</span><span class='line'>                  <span class="n">isCmtRet</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>          <span class="k">elif</span> <span class="n">line</span><span class="p">[</span><span class="n">preStartIdx</span><span class="p">:]</span> <span class="o">!=</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">:</span>
</span><span class='line'>              <span class="n">isCmtRet</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>          <span class="n">startPos</span> <span class="o">=</span> <span class="n">minStartIdx</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">elif</span> <span class="n">multiCmtFlagIdx</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span> <span class="c">#在多行注释中</span>
</span><span class='line'>          <span class="n">endCmtFlag</span> <span class="o">=</span> <span class="n">cmtFlagObj</span><span class="p">[</span><span class="s">&quot;multiCmtFlagList&quot;</span><span class="p">][</span><span class="n">multiCmtFlagIdx</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="c">#多行注释开始符</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">endCmtFlag</span> <span class="o">==</span> <span class="s">&#39;&#39;</span><span class="p">:</span>
</span><span class='line'>              <span class="k">return</span> <span class="bp">False</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="c">#注释符号配置有错误</span>
</span><span class='line'>          <span class="k">try</span><span class="p">:</span>
</span><span class='line'>              <span class="n">startPos</span> \
</span><span class='line'>              <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">endCmtFlag</span><span class="p">,</span> <span class="n">line</span><span class="p">[</span><span class="n">startPos</span><span class="p">:])</span><span class="o">.</span><span class="n">start</span><span class="p">()</span> \
</span><span class='line'>              <span class="o">+</span> <span class="n">startPos</span> \
</span><span class='line'>              <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">endCmtFlag</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;\*&#39;</span><span class="p">,</span> <span class="s">&#39;*&#39;</span><span class="p">))</span>  <span class="c">#查找多汗注释结束符的位置</span>
</span><span class='line'>              <span class="n">multiCmtFlagIdx</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>          <span class="k">except</span><span class="p">:</span>
</span><span class='line'>              <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># print isCmtRet, multiCmtFlagIdx</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">isCmtRet</span><span class="p">,</span> <span class="n">multiCmtFlagIdx</span> <span class="c">#返回是否注释行，以及当前是否在多行注释中</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">函数名：isInQuotation</span>
</span><span class='line'><span class="sd">功能：根据字符串中引号的奇偶，判断后面的字符是否在引号中</span>
</span><span class='line'><span class="sd">输入：</span>
</span><span class='line'><span class="sd"> line: 一行代码中指定字符前的字符串</span>
</span><span class='line'><span class="sd"> qttnFlagList: 引号列表</span>
</span><span class='line'><span class="sd">输出：</span>
</span><span class='line'><span class="sd"> 布尔值：</span>
</span><span class='line'><span class="sd">     True：字符串包含在引号中</span>
</span><span class='line'><span class="sd">     False：字符串不包含在引号中</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">isInQuotation</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">cmtFlag</span><span class="p">,</span> <span class="n">qttnFlagList</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">qttnFlagIdx</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>  <span class="n">flagIdx</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rearLine</span> <span class="o">=</span> <span class="n">line</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">qttnFlagList</span><span class="p">)):</span>
</span><span class='line'>      <span class="n">flag</span> <span class="o">=</span> <span class="n">qttnFlagList</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="n">flag</span> <span class="o">==</span> <span class="n">cmtFlag</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="c">#排除引号同时也是注释符号的情况</span>
</span><span class='line'>          <span class="k">continue</span>
</span><span class='line'>      <span class="k">try</span><span class="p">:</span>
</span><span class='line'>          <span class="n">flagIdx</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;(?&lt;!</span><span class="se">\\</span><span class="s">)&#39;</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">+</span> <span class="s">r&#39;.*&#39;</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span><span class="o">.</span><span class="n">start</span><span class="p">()</span> <span class="c">#查找左引号</span>
</span><span class='line'>          <span class="n">rearLine</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;(?&lt;!</span><span class="se">\\</span><span class="s">)&#39;</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">+</span> <span class="s">r&#39;.*&#39;</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">()[</span><span class="nb">len</span><span class="p">(</span><span class="n">flag</span><span class="p">):]</span>
</span><span class='line'>      <span class="k">except</span><span class="p">:</span>
</span><span class='line'>          <span class="n">flagIdx</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">flagIdx</span> <span class="o">&lt;</span> <span class="n">qttnFlagIdx</span><span class="p">:</span> <span class="c">#根据最早出现的左引号，确认左引号类型</span>
</span><span class='line'>          <span class="n">qttnFlagIdx</span> <span class="o">=</span> <span class="n">flagIdx</span>
</span><span class='line'>          <span class="n">qttnFlag</span> <span class="o">=</span> <span class="n">flag</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">qttnFlagIdx</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
</span><span class='line'>      <span class="k">try</span><span class="p">:</span>
</span><span class='line'>          <span class="c">#print rearLine</span>
</span><span class='line'>          <span class="n">rearLine</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">r&#39;(?&lt;!</span><span class="se">\\</span><span class="s">)&#39;</span> <span class="o">+</span> <span class="n">qttnFlag</span> <span class="o">+</span> <span class="s">r&#39;.*&#39;</span><span class="p">,</span> <span class="n">rearLine</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">()[</span><span class="nb">len</span><span class="p">(</span><span class="n">qttnFlag</span><span class="p">):]</span> <span class="c">#查找右引号</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">isInQuotation</span><span class="p">(</span><span class="n">rearLine</span><span class="p">,</span> <span class="n">cmtFlag</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">qttnFlagList</span><span class="p">)</span> <span class="c">#再次查找下一个左引号</span>
</span><span class='line'>      <span class="k">except</span><span class="p">:</span>
</span><span class='line'>          <span class="k">return</span> <span class="bp">True</span> <span class="c">#在引号对中</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">return</span> <span class="bp">False</span> <span class="c">#不在引号对中</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数列反推]]></title>
    <link href="http://foolishwolf.github.io/blog/2016/09/15/inferring-original-array/"/>
    <updated>2016-09-15T09:33:03+08:00</updated>
    <id>http://foolishwolf.github.io/blog/2016/09/15/inferring-original-array</id>
    <content type="html"><![CDATA[<h2>题目：</h2>

<p><strong>对数列8，1，6，2，10，3，7，4，9，5进行如下操作：</strong><br/>
<strong>将8移到数列末尾，并输出下一个数字1，然后将6移动数列末尾，并输出下一个数字2……直到输出所有数字。输出的结果为：</strong><br/>
<strong>1，2，3，4，5，6，7，8，9，10</strong><br/>
<strong>现在任意给定进行上述操作后的结果数列D[n]，求该数列在进行操作前的原数列S[n]是什么？</strong><br/>
<strong>输入：</strong> <em>n, D[n]</em><br/>
<strong>输出：</strong> <em>S[n]</em></p>

<!--more-->


<p> </p>

<h2>解题思路：</h2>

<p>初看此题，第一反应肯定是总结归纳逆向的逻辑，倒也比较直观了。<br/>
定义sel(k)为第n-k步操作后已取的数列，opt(k)为第n-k步操作，rest(k)为第n-k步操作后未取的数列。则：<br/>
    1：对于结果为[1, 2]的情况，<br/>
        sel(0): [1, 2]，rest(0): []，opt(0): 移[]取2；<br/>
        sel(1): [1]，rest(1): [2]，opt(1): 移2取1；<br/>
        sel(2): []，rest(2): [2, 1]，opt(2): 无；<br/>
        所以原数列为[2, 1]。<br/>
    2：对于结果为[1, 2, 3]的情况，<br/>
        sel(0): [1, 2, 3]，rest(0)为[]，opt(0): 移[]取3；<br/>
        sel(1): [1, 2]，rest(1): [3]，opt(1): 移3取2；<br/>
        sel(2): [1]，rest(2): [3, 2]，opt(2): 移2取1；<br/>
        sel(3): []，rest(3): [2, 1, 3]，opt(3): 无；<br/>
        所以原数列为[2, 1, 3]。<br/>
    3：对于结果为[1, 2, 3, 4]的情况，<br/>
        sel(0): [1, 2, 3, 4]，rest(0)为[]，opt(0): 移[]取4；<br/>
        sel(1): [1, 2, 3]，rest(1): [4]，opt(1): 移4取3；<br/>
        sel(2): [1, 2]，rest(2): [4, 3]，opt(2): 移3取2；<br/>
        sel(3): [1]，rest(3): [3, 2, 4]，opt(3): 移4取1；<br/>
        sel(4): []，rest(4): [4, 1, 3, 2]，opt(3): 无；<br/>
        所以原数列为[4, 1, 3, 2]。<br/>
    ……<br/>
不难发现k>0时，sel(k+1)、rest(k+1)与sel(k)、rest(k)之间的关系为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rest(k+1) = [rest(k)[k-1], sel(k)[n-k-1], rest(k)[0], ..., rest(k)[k-2]] 
</span><span class='line'>sel(k) = [1, 2, ..., n-k]</span></code></pre></td></tr></table></div></figure>


<p>根据上面的两个式子，就可以构造循环来推出rest(n)，即为原数列。</p>

<p>然而这不是数学题，下面让我们用程序员的思维来解决。</p>

<h2>解题思路PLUS：</h2>

<p>对于S[n]中各坐标为k的数字，在经过题目中的操作后，变换到D[n]的位置i。而对于给定的D[n]，显然可知D[i] = i + 1，即对于已知的k，可以得出S[k] = D[i] = i + 1。<br/>
所以我们只需构造SrcIdx[n] = [0, &hellip;, n-1]，并作题目中的操作，得到DstIdx[n]。然后构造i = 0~n-1的循环，将S[DstIdx[i]]赋值为 i+1 即可，求解完毕。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在Windows下优雅地使用Ubuntu的bash]]></title>
    <link href="http://foolishwolf.github.io/blog/2016/08/14/how-to-gracefully-use-ubuntu-bash-on-windows/"/>
    <updated>2016-08-14T18:44:50+08:00</updated>
    <id>http://foolishwolf.github.io/blog/2016/08/14/how-to-gracefully-use-ubuntu-bash-on-windows</id>
    <content type="html"><![CDATA[<p>Win10一周年的升级版本提供了内置的Unbutu Bash功能——升级Win10到最新的1607，然后在“程序与功能-启用或关闭Windows功能”中选择安装beta版的内置Linux bash功能。重启之后，Cmd或PowerShell中键入bash，根据提示从应用商店中下载子系统。该系统目前的版本为Ubuntu 14.04，系统加载后，硬盘中的各个盘符会自动挂载到/mnt/下，如/mnt/c等，也可以使用apt-get等工具直接从源上下载Ubuntu上运行的项目或组件。
当然这个方法的前提是你使用的是Win10系统，而且目前来看beta版还是有一些小问题，特别是在某些小的交互操作上，不能很好地与Ubuntu的bash相匹配。</p>

<!--more-->


<p> </p>

<h2>Cygwin</h2>

<p>不是很推荐，官网上是这样描述的：</p>

<h4>What&hellip;</h4>

<h4>&hellip;isn&rsquo;t it?</h4>

<h4>Cygwin is not:</h4>

<p>•a way to run native Linux apps on Windows. You must rebuild your application from source if you want it to run on Windows  .
•a way to magically make native Windows apps aware of UNIX® functionality like signals, ptys, etc. Again, you need to build your apps from source if you want to take advantage of Cygwin functionality. <br/>
所以Cygwin给人四不像的感觉，使用起来还是有很多不便。如果只是为了在windows下使用一些顺手的命令，倒是可以试一试。</p>

<h2>Vmware虚拟机+Ubuntu</h2>

<p>长期以来，这是一个小白都知道的方法，而且随着PC性能的提高，虚拟机的desktop显示效果几乎可以做到以假乱真。但是虚拟机毕竟是“<strong>虚拟</strong>”的机，不可能独占资源地运行，所以在虚拟机desktop上的交互体验，总是让你怀疑自己机器的性能。<br/>
所以，这里我们需要摒弃虚拟机的桌面环境，并仿照远程登录的方式，在命令行中使用本地虚拟机的Bash。 <br/>
<em>提示: 即便如此，你可能仍然需要一个8G的内存。</em></p>

<h4>首先你需要一个顺手的Command Prompt</h4>

<p>如果你在使用Terminal很久以后，还能忍受Cmd或者PowerShell的话，那也没办法。<br/>
这里推荐Cmder，Cmder可以从官网或者Github上下载，mini版即可，虽然只有几M，但是限于网络的原因，可能确实需要点下载的时间。Cmder的完整版包含了Github的bash，但其实并不需要，因为即将在Linux下使用Git，Windows下就无需再安装了。</p>

<h4>安装OpenSSH，实现远程登录</h4>

<p>在<a href="http://www.mls-software.com/opensshd.html">http://www.mls-software.com/opensshd.html</a>下载OpenSSH的Windows版安装包并安装，在环境变量中添加OpenSSH的可执行文件目录，如“C:\Program Files\OpenSSH\bin”。<br/>
在Cmder中输入：<br/>
<code>vmrun start "your_vm_path" nogui</code><br/>
会以后台方式打开指定的虚拟机，然后输入：<br/>
<code>ssh your_name@virtual_machine_ip</code><br/>
<em>提示: 上面的两行shell命令可以保存为bat文件，方便以后直接调用。</em><br/>
出现提示输入密码的时候，输入虚拟机下对应用户的密码。输入正确后，就会进入用户目录“/home/your_name/”。<br/>
一般的设置下，虚拟机的IP是由主机的本地DHCP分配的，所以每次启动虚拟机后，虚拟机的IP地址可能会跟上次启动后不同，给使用ssh登录造成不便。所以最好在“虚拟网络编辑器”中，将“使用本地DHCP服务将IP地址分配给虚拟机”选项取消，并根据虚拟机所在子网（可以从“虚拟网络编辑器”中查到）和网关，手工将IP地址、子网掩码、网关、DNS设为固定值，方便以后的登录。</p>

<h4>虚拟机到主机的端口映射</h4>

<p>这一设置主要是方便在主机访问虚拟机某一端口的服务，例如在虚拟机的“PORT”端口上搭建了web服务，并将“PORT”端口映射到了主机“HOST_PORT”后，即可在主机的浏览器中输入“127.0.0.1:HOST_PORT”来访问此网站。<br/>
以Vmware Workstation 12 为例，在“编辑-虚拟网络编辑器-NAT设置”中，点击“添加”，输入需要映射到的目的主机端口，虚拟机的IP以及虚拟机的源端口，最后点击确定即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Posted My First Blog on Github]]></title>
    <link href="http://foolishwolf.github.io/blog/2016/08/07/how-i-posted-my-first-blog-on-github/"/>
    <updated>2016-08-07T23:46:50+08:00</updated>
    <id>http://foolishwolf.github.io/blog/2016/08/07/how-i-posted-my-first-blog-on-github</id>
    <content type="html"><![CDATA[<p>This blog is mainly about how to post a blog on Github with Octopress, and the setup of a Markdown-style document editor - Sublime Text is also introduced.</p>

<!--more-->


<p> </p>

<h2>1. Octopress</h2>

<h3>What is Octopress</h3>

<p>Octopress is a blogging tool build with Ruby, and can be downloaded from Github.</p>

<h3>How to build the Octopress</h3>

<p>Here is the building process on Ubuntu, and it seems similar on other OS.</p>

<h4>Install Git</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sudo apt-get install git</span></code></pre></td></tr></table></div></figure>


<h4>Install Ruby</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$sudo apt-get install ruby ruby-dev</span></code></pre></td></tr></table></div></figure>


<h4>Download Octopress</h4>

<p>Clone the octopress to local directory <em>octopress</em>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$git clone git://github.com/imathis/octopress.git octopress</span></code></pre></td></tr></table></div></figure>


<h4>Install the dependencies</h4>

<p>Enter the directory of octopress:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$cd ocopress</span></code></pre></td></tr></table></div></figure>


<p>And type in following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$gem install bundler 
</span><span class='line'>$rbenv rehash 
</span><span class='line'>$bundle install </span></code></pre></td></tr></table></div></figure>


<h4>Install default theme of Octopress</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rake install</span></code></pre></td></tr></table></div></figure>


<h3>Initiate blog pages and commit source</h3>

<p>Before posting a new blog to Github, a respository with the name <em>yourname.github.io</em> is expected to bulid.
Then run the setup:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>Follow the instructions and type in the answers of what they ask.
Finally, generate and deploy your blog site onto Github:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rake generate
</span><span class='line'>$rake deploy</span></code></pre></td></tr></table></div></figure>


<p>The source for your blog should also be committed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$git add .
</span><span class='line'>$git commit -m 'your comments'
</span><span class='line'>$git push origin source</span></code></pre></td></tr></table></div></figure>


<h3>Posting a new blog</h3>

<p>Use command <code>rake new_post[]</code> to create a new blog file in <em>source/_post</em>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rake new_post['Title of Your New Blog']</span></code></pre></td></tr></table></div></figure>


<p>Everytime before posting a new blog, command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$rake generate
</span><span class='line'>$rake deploy</span></code></pre></td></tr></table></div></figure>


<p>should be run to generate the formatted blog and deploy it to Github.</p>

<h2>2. Local Markdown editor - Sublime Text</h2>

<p>After the Octopress is build, what we need now is a powerful editor helping to write a markdown-style document gracefully. And Sublime Text is just one perfect choice.</p>

<h3>Installation</h3>

<p>Sublime Text is a cross platform and sophisticated text editor for code, markup and prose. Once being installed and it can be evaluated for free. However, such a powerful editor does not directly enable markdown-style editing. Therefore, it is necessary to add markdown packages into Sublime Text.</p>

<p>Steps:</p>

<ul>
<li>Use <code>Ctrl+`</code> to call the console.</li>
<li>Copy following code into the command line of console:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">urllib2</span><span class="o">,</span><span class="nn">os</span><span class="p">;</span> <span class="n">pf</span><span class="o">=</span><span class="s">&#39;Package Control.sublime-package&#39;</span><span class="p">;</span> <span class="n">ipp</span> <span class="o">=</span> <span class="n">sublime</span><span class="o">.</span><span class="n">installed_packages_path</span><span class="p">();</span> <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span> <span class="n">ipp</span> <span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">ipp</span><span class="p">)</span> <span class="k">else</span> <span class="bp">None</span><span class="p">;</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">install_opener</span><span class="p">(</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">build_opener</span><span class="p">(</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">ProxyHandler</span><span class="p">(</span> <span class="p">)));</span> <span class="nb">open</span><span class="p">(</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span> <span class="n">ipp</span><span class="p">,</span> <span class="n">pf</span><span class="p">),</span> <span class="s">&#39;wb&#39;</span> <span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span> <span class="n">urllib2</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span> <span class="s">&#39;http://sublime.wbond.net/&#39;</span> <span class="o">+</span><span class="n">pf</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span> <span class="s">&#39; &#39;</span><span class="p">,</span><span class="s">&#39;%20&#39;</span> <span class="p">))</span><span class="o">.</span><span class="n">read</span><span class="p">());</span> <span class="k">print</span><span class="p">(</span> <span class="s">&#39;Please restart Sublime Text to finish installation&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Press key <code>Enter</code> to run the code above and then restart Sublime Text 2.</li>
<li>Use <code>Ctrl+Shift+P</code> to call the Command Palette.</li>
<li>Type in <code>PCIP</code> and press key <code>Enter</code>.</li>
<li>Type in key words to find package <strong><em>Markdown Preview</em></strong> and package <strong><em>Markdown Editing</em></strong>.</li>
<li>Click and install these two packages.</li>
<li><p>Done!</p>

<p>  Congratulations! Let us undertake to write blogs on Github!</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
